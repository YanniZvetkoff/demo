<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:ns="components.custom_tree.controls.*" >
	<fx:Declarations>
		<!--
		Example of the xml used as dataprovider
		for the treecheckbox component.
		@label used for the item label
		@checked used for the checked status:
		0 = un-checked
		1 = selected
		2 = 3rd status selected -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.custom_tree.renderers.TreecheckboxItemRenderer;
			
			import mx.events.TreeEvent;
			
			[Bindable]
			public var dataProvider:XML;
			
			/**
			 * Called on checkbox click
			 * check and update for both parents and child nodes
			 * according to the checkbox status
			 */
			private function onItemCheck( event: TreeEvent ): void
			{
				updateParents( event.item as XML, ( event.itemRenderer as TreecheckboxItemRenderer ).checkBox.checkState );
				updateChilds( event.item as XML, ( event.itemRenderer as TreecheckboxItemRenderer ).checkBox.checkState );
				
				var item:XML = event.item as XML;
				var value:String = item.@value;
				var checkState:uint = ( event.itemRenderer as TreecheckboxItemRenderer ).checkBox.checkState ;
			}
			
			private function updateChilds( item:XML, value: uint ):void
			{
				var middle: Boolean = ( value & 2 << 1 ) == ( 2 << 1 );
				var selected: Boolean = ( value & 1 << 1 ) == ( 1 << 1 );
				
				if( item.children( ).length( ) > 0 && !middle )
				{
					for each(var x: XML in item.node )
					{
						x.@checked = value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0";
						updateChilds( x, value );
					}
				}
			}
			
			private function updateParents( item: XML, value: uint ): void
			{
				var checkValue: String = ( value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0" );
				var parentNode: XML = item.parent( );
				if( parentNode )
				{
					for each(var x: XML in parentNode.node )
					{
						if( x.@checked != checkValue )
						{
							checkValue = "2"
						}
					}
					parentNode.@checked = checkValue;
					updateParents( parentNode, value );
				}
			}
			
		]]>
	</fx:Script>	

		
		<ns:TreeCheckBox id="mytree"
							   showRoot="false"
							   width="100%"
							   height="100%"
							   dataProvider="{dataProvider}"
							   labelField="@label"
							   checkField="@checked"
							   itemCheck="onItemCheck( event )"
							   defaultLeafIcon="{null}" 
							   folderOpenIcon="{null}" 
							   folderClosedIcon="{null}"
							   />

</s:Group>
